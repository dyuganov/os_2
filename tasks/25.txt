25. Производитель-потребитель

Реализуйтеj очередь сообщений, которая может использоваться для обмена данными между 
двумя или большим количеством нитей. Реализация очереди должна поддерживать функции
void mymsginit(queue *); 
void mymsqdrop(queue *);
void mymsgdestroy(queue *);
int mymsgput(queue *, char * msg);
int mymsgget(queue *, char * buf, size_t bufsize);


Допускается реализация на C++ с заменой mymsginit и mymsgdestroy на конструктор 
и деструктор, а операций get и put на соответствующие методы.
mymsgput принимает в качестве параметра ASCIIZ строку символов, обрезает ее 
до 80 символов (если это необходимо) и помещает ее в очередь. Если очередь 
содержит более 10 записей, mymsgput блокируется. Функция возвращает количество 
переданных символов.
mymsgget возвращает первую запись из очереди, обрезая ее до размера пользовательского 
буфера (если это необходимо). В любом случае, запись извлекается из очереди полностью. 
Если очередь пуста, mymsgget блокируется. Функция возвращает количество прочитанных символов.
mymsgdrop должна приводить к разблокированию ожидающих операций get и put. 
Ожидавшие вызовы и все последующие вызовы get и put должны возвращать 0.
mymsqdestroy должна вызываться после того, как будет известно, 
что ни одна нить больше не попытается выполнять операции над очередью.

Необходимо продемонстрировать работу очереди 
с двумя производителями и двумя потребителями.

Для синхронизации доступа к очереди используйте семафоры-счетчики.
